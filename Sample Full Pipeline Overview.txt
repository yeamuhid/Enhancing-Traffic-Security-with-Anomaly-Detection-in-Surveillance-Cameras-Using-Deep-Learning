import torch
import cv2
import numpy as np
from sklearn.ensemble import IsolationForest

# Load YOLOv5 model for object detection
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')

# Initialize video capture
cap = cv2.VideoCapture('traffic_footage.mp4')

# Set up variables for tracking object positions (you can use a tracker like SORT)
tracked_positions = []

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Perform object detection
    results = model(frame)

    # Extract detected objects and their coordinates
    for *xyxy, conf, cls in results.xyxy[0]:  # Iterate through detected objects
        x1, y1, x2, y2 = map(int, xyxy)  # Get bounding box coordinates
        center = np.array([(x1 + x2) / 2, (y1 + y2) / 2])  # Calculate object center
        
        # Append to tracked positions (for simplicity, we track the first object detected)
        tracked_positions.append(center)

        # Display bounding boxes on the frame
        label = f'{model.names[int(cls)]} {conf:.2f}'
        cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 255, 255), 2)

    # Anomaly Detection based on speed
    if len(tracked_positions) > 5:  # Wait until enough positions are collected
        speeds = calculate_speed(tracked_positions)
        speeds = np.array(speeds).reshape(-1, 1)

        # Fit anomaly detection model (Isolation Forest)
        clf = IsolationForest(contamination=0.1)
        clf.fit(speeds)
        anomalies = clf.predict(speeds)

        # If an anomaly is detected, highlight it
        for idx, anomaly in enumerate(anomalies):
            if anomaly == -1:
                anomaly_position = tracked_positions[idx + 1]
                cv2.circle(frame, tuple(anomaly_position.astype(int)), 10, (0, 0, 255), -1)
                cv2.putText(frame, "Anomaly Detected", tuple(anomaly_position.astype(int)), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)

    # Display the frame
    cv2.imshow('Traffic Security and Anomaly Detection', frame)

    # Break loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
